import React, { useState, useEffect } from 'react';
import { getCategories, addCategory, deleteCategory as deleteCategoryService } from '../services/localStorageService';
import './CategoryManager.css'; // Import the new CSS file

function CategoryManager({ onCategoryUpdated }) {
  const [categories, setCategories] = useState([]);
  const [newCategoryName, setNewCategoryName] = useState('');
  const [newCategoryType, setNewCategoryType] = useState('expense'); // Default to expense
  const [newCategoryColor, setNewCategoryColor] = useState('#000000'); // Default to black
  const [newCategoryEmoji, setNewCategoryEmoji] = useState(''); // State for emoji
  const [error, setError] = useState('');

  useEffect(() => {
    loadCategoriesData();
  }, []);

  const loadCategoriesData = () => {
    const loadedCategories = getCategories();
    setCategories(loadedCategories);
  };

  const handleAddCategory = (e) => {
    e.preventDefault();
    setError('');
    if (!newCategoryName.trim()) {
      setError('Category name cannot be empty.');
      return;
    }
    // Check for duplicate category name (case-insensitive)
    if (categories.some(cat => cat.name.toLowerCase() === newCategoryName.trim().toLowerCase())) {
        setError('A category with this name already exists.');
        return;
    }

    const categoryData = {
      // id will be generated by addCategory if not provided, but we can also generate one here
      // id: generateId(), // Or let addCategory handle it if it has that logic
      name: newCategoryName.trim(),
      type: newCategoryType,
      color: newCategoryColor,
      emoji: newCategoryEmoji.trim(), // Use 'emoji', not 'iconEmoji'
    };

    addCategory(categoryData);
    loadCategoriesData(); // Re-load categories to include the new one
    setNewCategoryName('');
    setNewCategoryType('expense');
    setNewCategoryColor('#000000');
    setNewCategoryEmoji(''); // Reset emoji input

    if (onCategoryUpdated) {
      onCategoryUpdated(); // Call the callback
    }
  };

  const handleDeleteCategory = (categoryId) => {
    if (window.confirm('Are you sure you want to delete this category? This might affect existing transactions using this category.')) {
      const success = deleteCategoryService(categoryId);
      if (success) {
        console.log('Category deleted:', categoryId);
        loadCategoriesData(); // Refresh the list in this component
        if (onCategoryUpdated) {
          onCategoryUpdated(); // Notify App to refresh other components
        }
      } else {
        console.warn('Failed to delete category or category not found:', categoryId);
        setError('Failed to delete category. It might not exist or is in use (future check).'); // Generic error for now
      }
    }
  };

  return (
    // The main container class will be applied by SettingsPage to wrap this and Data Management
    // For standalone use, or if SettingsPage doesn't provide a card, this could be .category-manager-card
    <div className="category-manager-component"> {/* Changed from category-manager-container to avoid conflict if nested */} 
      {/* Title for the whole manager, if SettingsPage doesn't provide a more global one */}
      {/* <h3>Manage Categories</h3> */}
      
      <form onSubmit={handleAddCategory} className="add-category-form">
        <h4>Add New Category</h4>
        {error && <p className="category-form-error">{error}</p>}
        <div className="form-group">
          <label htmlFor="newCatName">Name:</label>
          <input 
            type="text" 
            id="newCatName" 
            value={newCategoryName} 
            onChange={(e) => setNewCategoryName(e.target.value)} 
            required 
          />
        </div>
        <div className="form-group">
          <label htmlFor="newCatType">Type:</label>
          <select 
            id="newCatType" 
            value={newCategoryType} 
            onChange={(e) => setNewCategoryType(e.target.value)} 
          >
            <option value="expense">Expense</option>
            <option value="income">Income</option>
          </select>
        </div>
        <div className="form-group">
          <label htmlFor="newCatColor">Color:</label>
          <input 
            type="color" 
            id="newCatColor" 
            value={newCategoryColor} 
            onChange={(e) => setNewCategoryColor(e.target.value)} 
          />
        </div>
        <div className="form-group">
          <label htmlFor="newCatEmoji">Emoji (Optional):</label>
          <input
            type="text"
            id="newCatEmoji"
            value={newCategoryEmoji}
            onChange={(e) => setNewCategoryEmoji(e.target.value)}
            placeholder="e.g., ðŸ›’"
            maxLength="2"
          />
        </div>
        <button type="submit" className="btn btn-primary">Add Category</button>
      </form>

      <div className="existing-categories-section">
        <h4>Existing Categories</h4>
        {categories.length === 0 ? (
          <p className="no-categories-message">No categories defined yet.</p>
        ) : (
          <div className="category-list-scroll-container">
            <ul className="existing-categories-list">
              {categories.map(category => (
                <li key={category.id} className="category-item">
                  <div className="category-info">
                    <span 
                      className="category-color-swatch"
                      style={{ backgroundColor: category.color || '#ccc' }}
                    ></span>
                    {category.emoji && <span className="category-emoji">{category.emoji}</span>}
                    <span className="category-name">{category.name}</span>
                    <span className="category-type">({category.type})</span>
                  </div>
                  <div className="category-actions">
                    <button 
                      onClick={() => handleDeleteCategory(category.id)} 
                      className="btn btn-danger btn-sm"
                    >
                      Delete
                    </button>
                  </div>
                </li>
              ))}
            </ul>
          </div>
        )}
      </div>
    </div>
  );
}

export default CategoryManager; 